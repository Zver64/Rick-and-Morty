{"version":3,"sources":["assets/vector.svg","components/ElSlot.tsx","apollo/gql.tsx","components/ElCard.tsx","components/CardList.tsx","components/SearchBox.tsx","App.tsx","serviceWorker.js","apollo/resolvers.tsx","index.tsx"],"names":["module","exports","styled","className","imgUrl","src","alt","image","GET_FILTERED","gql","GET_PARTY","ADD_FILTER","ADD_PARTY","GET_IMAGES","name","id","useMutation","variables","addFilter","match","_name","person","toLowerCase","link","addParty","onClick","require","CardList","search","useQuery","page","loading","error","data","filtered","filterLoading","characters","results","filter","val","item","length","map","key","list","useState","setSearch","deb","debounce","placeholder","onChange","e","target","value","mySearch","AppContainer","div","App","data-testId","party","rick","morty","Boolean","window","location","hostname","Mutation","_","cache","readQuery","query","FILTERED","__typename","writeQuery","client","Object","assign","InMemoryCache","ApolloClient","HttpLink","uri","resolvers","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e8463528.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vector.f6338795.svg\";","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ntype elSlotProp = {\r\n  className?: string,\r\n  imgUrl?: string\r\n}\r\n\r\nfunction ElSlot({className, imgUrl = ''}: elSlotProp) {\r\n  const image = () => {\r\n    if(imgUrl) {\r\n      return <img src={imgUrl} alt=\"test\" />\r\n    }\r\n  }\r\n  return(\r\n    <div className={className}>\r\n      {image()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default styled(ElSlot)`\r\n  width: 180px;\r\n  height: 220px;\r\n  background-color: #DADADA;\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n`","import { gql } from '@apollo/client'\r\n\r\nexport const GET_FILTERED = gql`\r\n  query GetFiltered {\r\n    filtered @client\r\n  }\r\n`\r\n\r\nexport const GET_PARTY = gql`\r\n  query GetParty {\r\n    party @client\r\n  }\r\n`\r\n\r\nexport const ADD_FILTER = gql`\r\n  mutation AddFilter($id: String!) {\r\n    addFilter(id: $id) @client\r\n  }\r\n`\r\n\r\nexport const ADD_PARTY = gql`\r\n  mutation AddParty($person: String, $link: String) {\r\n    addParty(person: $person, link: $link) @client\r\n  }\r\n`\r\nexport const GET_IMAGES = gql`\r\n  query getCharacters($page: Int!, $name: String!) {\r\n    characters(page: $page, filter: { name: $name }) {\r\n      results {\r\n        image\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMutation } from '@apollo/client'\r\nimport { ADD_PARTY, ADD_FILTER } from '../apollo/gql'\r\n\r\ntype myProp = {\r\n  className?: any,\r\n  imgUrl?: string,\r\n  id: string,\r\n  name?: string\r\n}\r\n\r\n\r\nfunction ElCard({ className = {}, imgUrl = '', name = '', id }: myProp) {\r\n  const [addFilter] = useMutation(ADD_FILTER, {variables: {id}})\r\n  let [_name] = name.match(/rick|morty/gi) || []\r\n  const [ addParty ] = useMutation(ADD_PARTY, {\r\n    variables: {\r\n      person: _name && _name.toLowerCase(),\r\n      link: imgUrl\r\n    }\r\n  })\r\n  return (\r\n    <div className={className}>\r\n      <button onClick={() => addFilter()} className='close'>\r\n        <img src={require(\"../assets/vector.svg\")} alt='close' />\r\n      </button>\r\n      <div className='imageBox' onClick={() => {\r\n        if(_name) addParty()\r\n        }} >\r\n        <img src={imgUrl} alt='test' className='image' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default styled(ElCard)`\r\n  padding: 15px;\r\n  position: relative;\r\n  .imageBox {\r\n    border: 1px solid black;\r\n    width: 180px;\r\n    height: 220px;\r\n  }\r\n  .image {\r\n    object-fit: cover;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  .close {\r\n    position: absolute;\r\n    padding: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    top: 20px;\r\n    right: 20px;\r\n    background-color: white;\r\n    border: none;\r\n    border-radius: 50%;\r\n    width: 30px;\r\n    height: 30px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport ElCard from './ElCard'\r\nimport { useQuery } from '@apollo/client'\r\nimport { GET_FILTERED, GET_IMAGES } from '../apollo/gql'\r\n\r\nfunction CardList({ search = '' }: { search?: string }) {\r\n  const { loading, error, data } = useQuery(GET_IMAGES, {\r\n    variables: {\r\n      page: 1,\r\n      name: search,\r\n    },\r\n  })\r\n  const { data: filtered, loading: filterLoading } = useQuery(GET_FILTERED)\r\n  const list = (data: any) => {\r\n    if (loading || filterLoading) return <p>Loading...</p>\r\n    if (error) {\r\n      return <p>Not found...</p>\r\n    }\r\n    return data.characters.results\r\n      .filter((val: any) => {\r\n        const test = filtered.filtered.filter((item: any) => item.id === val.id)\r\n        return !test.length\r\n      })\r\n      .map((val: any) => {\r\n      return <ElCard imgUrl={val.image} key={val.id} name={val.name} id={val.id} />\r\n    })\r\n  }\r\n  return <>{list(data)}</>\r\n}\r\n\r\nexport default CardList\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport CardList from './CardList'\r\nimport debounce from 'lodash.debounce'\r\n\r\nfunction SearchBox({ className }: { className?: any }) {\r\n  let [search, setSearch] = useState('')\r\n\r\n  function getData(name: string) {\r\n    setSearch(name)\r\n  }\r\n  const deb = debounce(getData, 300)\r\n  const mySearch = (search: string) => {\r\n    if (!search) return <p>Waiting for your search</p>\r\n    if (search.length < 3) return <p>Your query is too short</p>\r\n    return <CardList search={search} />\r\n  }\r\n  return (\r\n    <div className={className}>\r\n      <div className='search'>\r\n        <input\r\n          placeholder='type something'\r\n          onChange={(e) => deb(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='list'>\r\n        {mySearch(search)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default styled(SearchBox)`\r\n  .list {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n  }\r\n  .search {\r\n    margin-bottom: 50px;\r\n    input {\r\n      width: 100%;\r\n      padding: 22px 27px;\r\n      background: #ffffff;\r\n      border: 1px solid #a0a0a0;\r\n      font-style: normal;\r\n      font-weight: 300;\r\n      font-size: 30px;\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\nimport styled from 'styled-components'\nimport './styles.css'\nimport ElSlot from './components/ElSlot'\nimport SearchBox from './components/SearchBox'\nimport { GET_PARTY } from './apollo/gql'\nimport { useQuery } from '@apollo/client'\n\nconst AppContainer = styled.div`\n  padding: 15px;\n  width: 810px;\n  max-width: 100%;\n  margin: 0 auto 50px;\n  .pair {\n    display: flex;\n    justify-content: center;\n    & > * {\n      margin-right: 30px;\n      &:last-child {\n        margin: 0;\n      }\n    }\n  }\n  .party {\n    font-style: normal;\n    font-weight: bold;\n    font-size: 30px;\n    line-height: 35px;\n    text-align: center;\n  }\n`\nfunction App() {\n  const { data } = useQuery(GET_PARTY)\n  return (\n    <AppContainer>\n      <div data-testId='test' className='main'>\n        <SearchBox />\n      </div>\n      <h3 className='party'>Party</h3>\n      <div className='pair'>\n        <ElSlot imgUrl={data.party.rick} />\n        <ElSlot imgUrl={data.party.morty} />\n      </div>\n    </AppContainer>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { gql } from '@apollo/client'\r\nimport { GET_FILTERED as FILTERED, GET_PARTY } from './gql'\r\nexport default {\r\n  Mutation: {\r\n    addFilter: (_: any, {id}:{id:string}, {cache}:{cache: any}) => {\r\n\r\n      const list = cache.readQuery({query: FILTERED})\r\n      const filtered = [...list.filtered, {\r\n        __typename: 'Filtered',\r\n        id: id\r\n      }]\r\n      cache.writeQuery({\r\n        query: FILTERED,\r\n        data: {\r\n          filtered\r\n        }\r\n      })\r\n\r\n      return null\r\n    },\r\n    addParty(_:any, variables: any, client: any) {\r\n      const {party} = client.cache.readQuery({query: GET_PARTY})\r\n      const data = Object.assign({}, party, {[variables.person]: variables.link})\r\n      client.cache.writeQuery({\r\n        query: GET_PARTY,\r\n        data: {\r\n          party: data\r\n        }\r\n      })\r\n    }\r\n  },\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider, gql } from '@apollo/client'\nimport resolvers from './apollo/resolvers'\n\nconst cache = new InMemoryCache()\nconst client = new ApolloClient({\n  cache,\n  link: new HttpLink({\n    uri: 'https://rickandmortyapi.com/graphql',\n  }),\n  resolvers\n})\ncache.writeQuery({\n  query: gql`\n    query {\n      search\n      filtered\n      party {\n        rick\n        morty\n      }\n    }\n  `,\n  data: {\n    __typename: 'Root',\n    search: '',\n    filtered: [],\n    party: {\n      __typename: 'Party',\n      rick: '',\n      morty: ''\n    }\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}